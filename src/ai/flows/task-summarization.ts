
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates a status update for a given task using its details.
 *
 * - summarizeTask - A function that generates a status update for a given task.
 * - TaskSummarizationInput - The input type for the summarizeTask function.
 * - TaskSummarizationOutput - The return type for the summarizeTask function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TaskSummarizationInputSchema = z.object({
  title: z.string().describe('The title of the task.'),
  description: z.string().optional().describe('The detailed description of the task.'),
  isCompleted: z.boolean().describe('Whether the task is marked as complete.'),
  priority: z.string().describe('The priority of the task (e.g., low, medium, high, urgent).'),
  dueDate: z.string().optional().describe('The due date of the task (ISO format).'),
  subtasks: z.array(z.object({
    text: z.string(),
    completed: z.boolean(),
  })).optional().describe('A list of subtasks associated with the main task.'),
  // clientName removed as it's now on the workflow level
  deliverables: z.array(z.string()).optional().describe('A list of deliverables for this task, if any.'),
});
export type TaskSummarizationInput = z.infer<typeof TaskSummarizationInputSchema>;

const TaskSummarizationOutputSchema = z.object({
  summary: z.string().describe('A concise status update for the task, suitable for a client. If no meaningful update can be made, this will indicate so.'),
});
export type TaskSummarizationOutput = z.infer<typeof TaskSummarizationOutputSchema>;

export async function summarizeTask(input: TaskSummarizationInput): Promise<TaskSummarizationOutput> {
  return summarizeTaskFlow(input);
}

const taskSummarizationPrompt = ai.definePrompt({
  name: 'taskSummarizationPrompt',
  input: {schema: TaskSummarizationInputSchema},
  output: {schema: TaskSummarizationOutputSchema},
  prompt: `You are an AI assistant helping a freelancer draft a status update for a specific task, potentially for a client.
Task Title: "{{title}}"
{{#if description}}Description: {{{description}}}{{/if}}
Status: {{#if isCompleted}}Completed{{else}}In Progress/Pending{{/if}}
Priority: {{priority}}
{{#if dueDate}}Due Date: {{dueDate}}{{/if}}
{{#if clientName}}Client: {{clientName}}{{/if}} {/* This clientName variable will be undefined if not passed, Handlebars handles it gracefully */}

{{#if subtasks.length}}
Subtasks:
{{#each subtasks}}
- {{text}} ({{#if completed}}Completed{{else}}Pending{{/if}})
{{/each}}
{{/if}}

{{#if deliverables.length}}
Deliverables:
{{#each deliverables}}
- {{this}}
{{/each}}
{{/if}}

Based on ALL the information provided above, generate a concise status update for this task.
- If the task is completed, state that clearly and mention the completion.
- If it's in progress, highlight what has been done (based on completed subtasks) and what's likely pending or next.
- If deliverables are mentioned, consider them in the update.
- Frame the update in a professional and informative tone.
- Aim for a brief paragraph, 2-4 sentences long.

You MUST respond in JSON format. The JSON object must have a single key "summary", and its value should be the status update string.

Example of a valid response:
{"summary": "The 'Create Homepage Mockup' task is currently in progress. The initial wireframes are complete, and we are now working on the high-fidelity design. The next step is to incorporate client feedback on the color palette. This is a high priority item due by Friday."}

If the task details are too sparse to create a meaningful update (e.g., only a title with no description or subtasks), provide a JSON response like this:
{"summary": "The task '{{title}}' is currently {{#if isCompleted}}completed{{else}}pending/in progress{{/if}}. More details would be needed for a comprehensive update."}

Generate the status update now.`,
});

const summarizeTaskFlow = ai.defineFlow(
  {
    name: 'summarizeTaskFlow',
    inputSchema: TaskSummarizationInputSchema,
    outputSchema: TaskSummarizationOutputSchema,
  },
  async (input: TaskSummarizationInput) => {
    const response = await taskSummarizationPrompt(input);
    
    if (!response.output) {
      return { summary: "Error: AI did not return a valid summary structure." };
    }
    return response.output;
  }
);
